<?xml version="1.0"?>
<launch>
  <arg name="cloud_frame" default="/base_link"/>

  <!-- filter laser scan to remove 'shadow points' from scan and convert to point cloud -->
  <node pkg="laser_filters" type="scan_to_cloud_filter_chain" name="scan360_filter" output="screen">
    <remap from="scan" to="scan360" />
    <remap from="cloud_filtered" to="cloud360_filtered" />
    <param name="target_frame" value="$(arg cloud_frame)" />
    <param name="high_fidelity" value="true" />
    <rosparam command="load" file="$(find kurt_bringup)/config/kurt360_laser_filter.yaml"/>
  </node>

  <!-- self filter the point cloud according to urdf model of the robot -->
  <node pkg="robot_self_filter" type="self_filter" name="self_filter" output="screen">
    <remap from="cloud_in" to="cloud360_filtered" />
    <remap from="cloud_out" to="cloud360_self_filtered" />
    <param name="sensor_frame" value="laser360" />
    <rosparam command="load" file="$(find kurt_bringup)/config/kurt360_self_filter.yaml" />
  </node>

  <!-- assembler for filtered point clouds, provides assemble_scans service -->
  <node pkg="laser_assembler" type="point_cloud2_assembler" name="laser_scan_assembler" output="screen">
    <param name="sensor_frame" value="laser360" />
    <param name="fixed_frame" value="$(arg cloud_frame)" />
    <remap from="/cloud" to="/cloud360_self_filtered"/>
    <param name="max_clouds" value="15000" />
    <param name="ignore_laser_skew" value="false" />
  </node>

  <!-- regularly calls assemble_scans service, publishes assembled_cloud (PointCloud2) -->
  <node pkg="rotunit_snapshotter" type="rotunit_snapshotter" name="rotunit_snapshotter" output="screen"/>
</launch>
